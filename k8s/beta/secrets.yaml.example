# =============================================================================
# Kubernetes Secrets Template for Village Calendar Service (Beta Environment)
# =============================================================================
#
# IMPORTANT: This is a template file with placeholder values.
# DO NOT commit actual secrets to Git!
#
# To create the actual secret:
# 1. Copy this file: cp secrets.yaml.example secrets.yaml
# 2. Replace all placeholder values with actual credentials
# 3. Apply to cluster: kubectl apply -f secrets.yaml
# 4. Delete the local file: rm secrets.yaml
#
# Alternatively, use the Ansible playbook which handles secret creation
# automatically from environment variables.
#
# =============================================================================

---
apiVersion: v1
kind: Secret
metadata:
  name: calendar-secrets
  namespace: calendar-beta
  labels:
    app: calendar-app
    environment: beta
    service: calendar
type: Opaque
stringData:
  # ===========================================================================
  # Database Configuration
  # ===========================================================================
  # PostgreSQL database connection details for the beta environment
  # Example: jdbc:postgresql://10.50.0.10:5432/village_calendar_beta
  QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://REPLACE_WITH_DB_HOST:5432/village_calendar_beta"

  # Database username for the calendar service
  # Example: calendar_user_beta
  QUARKUS_DATASOURCE_USERNAME: "REPLACE_WITH_DB_USERNAME"

  # Database password (use a strong, randomly generated password)
  # Generate with: openssl rand -base64 32
  QUARKUS_DATASOURCE_PASSWORD: "REPLACE_WITH_DB_PASSWORD"

  # ===========================================================================
  # OAuth2 / OIDC Configuration
  # ===========================================================================
  # Google OAuth2 credentials (REQUIRED)
  # Obtain from: https://console.cloud.google.com/apis/credentials
  # Authorized redirect URI: https://beta.villagecompute.com/calendar/auth/google/callback
  GOOGLE_CLIENT_ID: "REPLACE_WITH_GOOGLE_CLIENT_ID.apps.googleusercontent.com"
  GOOGLE_CLIENT_SECRET: "REPLACE_WITH_GOOGLE_CLIENT_SECRET"

  # Facebook OAuth2 credentials (OPTIONAL - can be disabled in application.properties)
  # Obtain from: https://developers.facebook.com/apps/
  # Valid OAuth Redirect URI: https://beta.villagecompute.com/calendar/auth/facebook/callback
  FACEBOOK_CLIENT_ID: "REPLACE_WITH_FACEBOOK_APP_ID"
  FACEBOOK_CLIENT_SECRET: "REPLACE_WITH_FACEBOOK_APP_SECRET"

  # ===========================================================================
  # JWT Configuration
  # ===========================================================================
  # JWT keys for signing and verifying authentication tokens
  # Generate RSA key pair:
  #   openssl genrsa -out jwt-private-key.pem 2048
  #   openssl rsa -in jwt-private-key.pem -pubout -out jwt-public-key.pem
  #   cat jwt-private-key.pem | base64 -w 0  # Linux
  #   cat jwt-private-key.pem | base64       # macOS
  JWT_PUBLIC_KEY: |
    -----BEGIN PUBLIC KEY-----
    REPLACE_WITH_YOUR_JWT_PUBLIC_KEY_PEM_CONTENT
    (This should be the full PEM-encoded public key)
    -----END PUBLIC KEY-----

  JWT_PRIVATE_KEY: |
    -----BEGIN PRIVATE KEY-----
    REPLACE_WITH_YOUR_JWT_PRIVATE_KEY_PEM_CONTENT
    (This should be the full PEM-encoded private key)
    -----END PRIVATE KEY-----

  # ===========================================================================
  # Email / Mailer Configuration
  # ===========================================================================
  # SMTP configuration for sending order confirmation emails
  # For beta, use a real SMTP service (e.g., SendGrid, Amazon SES, Mailgun)

  # Sender email address
  # Example: orders@villagecompute.com
  MAIL_FROM: "REPLACE_WITH_SENDER_EMAIL@villagecompute.com"

  # SMTP server hostname
  # Examples:
  #   - SendGrid: smtp.sendgrid.net
  #   - Amazon SES: email-smtp.us-east-1.amazonaws.com
  #   - Mailgun: smtp.mailgun.org
  MAIL_HOST: "smtp.sendgrid.net"

  # SMTP server port (typically 587 for STARTTLS or 465 for SSL)
  MAIL_PORT: "587"

  # SMTP username
  # Note: For SendGrid, use "apikey" as the username
  MAIL_USERNAME: "apikey"

  # SMTP password or API key
  # For SendGrid: Your SendGrid API key
  # For Amazon SES: Your SMTP credentials
  MAIL_PASSWORD: "REPLACE_WITH_SMTP_PASSWORD_OR_API_KEY"

  # ===========================================================================
  # Cloudflare R2 / S3 Configuration
  # ===========================================================================
  # Cloudflare R2 configuration for storing calendar PDFs and template images
  # Obtain credentials from: https://dash.cloudflare.com/ → R2 → Manage R2 API Tokens

  # R2 endpoint URL
  # Format: https://<account-id>.r2.cloudflarestorage.com
  R2_ENDPOINT: "https://REPLACE_WITH_ACCOUNT_ID.r2.cloudflarestorage.com"

  # R2 bucket name for calendar files
  # Example: village-calendar-beta
  R2_BUCKET: "village-calendar-beta"

  # R2 Access Key ID
  R2_ACCESS_KEY: "REPLACE_WITH_R2_ACCESS_KEY"

  # R2 Secret Access Key
  R2_SECRET_KEY: "REPLACE_WITH_R2_SECRET_KEY"

  # Public URL for accessing calendar files via R2 custom domain or public URL
  # Example: https://calendars-beta.villagecompute.com
  R2_PUBLIC_URL: "https://REPLACE_WITH_R2_PUBLIC_URL"

  # ===========================================================================
  # Stripe Configuration
  # ===========================================================================
  # Stripe API credentials for processing calendar purchases
  # Obtain from: https://dashboard.stripe.com/test/apikeys (use test keys for beta)

  # Stripe Secret Key (use test key for beta: starts with sk_test_)
  STRIPE_SECRET_KEY: "sk_test_REPLACE_WITH_STRIPE_SECRET_KEY"

  # Stripe Publishable Key (use test key for beta: starts with pk_test_)
  STRIPE_PUBLISHABLE_KEY: "pk_test_REPLACE_WITH_STRIPE_PUBLISHABLE_KEY"

  # Stripe Webhook Secret (for verifying webhook signatures)
  # Obtain from: https://dashboard.stripe.com/test/webhooks
  # Webhook endpoint: https://beta.villagecompute.com/calendar/api/webhooks/stripe
  STRIPE_WEBHOOK_SECRET: "whsec_REPLACE_WITH_STRIPE_WEBHOOK_SECRET"

# =============================================================================
# Secret Creation Examples
# =============================================================================
#
# Using kubectl directly:
# -----------------------
# kubectl create secret generic calendar-secrets \
#   --from-literal=QUARKUS_DATASOURCE_JDBC_URL="jdbc:postgresql://10.50.0.10:5432/village_calendar_beta" \
#   --from-literal=QUARKUS_DATASOURCE_USERNAME="calendar_user_beta" \
#   --from-literal=QUARKUS_DATASOURCE_PASSWORD="your-secure-password" \
#   --from-literal=GOOGLE_CLIENT_ID="your-client-id.apps.googleusercontent.com" \
#   --from-literal=GOOGLE_CLIENT_SECRET="your-client-secret" \
#   --from-file=JWT_PUBLIC_KEY=./jwt-public-key.pem \
#   --from-file=JWT_PRIVATE_KEY=./jwt-private-key.pem \
#   --namespace=calendar-beta
#
# Using Ansible (recommended):
# -----------------------------
# The deploy-calendar.yml playbook handles secret creation automatically
# from environment variables. Set the following environment variables:
#
#   export DB_HOST="10.50.0.10"
#   export DB_PASSWORD="your-db-password"
#   export GOOGLE_CLIENT_ID="your-client-id"
#   export GOOGLE_CLIENT_SECRET="your-secret"
#   # ... etc
#
# Then run:
#   ansible-playbook -i inventory.yml deploy-calendar.yml
#
# =============================================================================
