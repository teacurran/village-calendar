openapi: 3.0.3
info:
  title: Village Calendar Service REST API
  version: 1.0.0
  description: REST API for webhooks, OAuth2 authentication, and health monitoring. For calendar operations, use the GraphQL API at /graphql.
  contact:
    name: VillageCompute Support
    url: https://villagecompute.com

servers:
  - url: http://localhost:8030
    description: Development server
  - url: https://calendar.villagecompute.com
    description: Production server

tags:
  - name: Webhooks
    description: External webhook endpoints for payment processing
  - name: Authentication
    description: OAuth2 authentication endpoints for Google and Facebook login
  - name: Health
    description: System health and metrics endpoints

paths:
  /api/webhooks/stripe:
    post:
      tags:
        - Webhooks
      summary: Handle Stripe webhook events
      description: |
        Processes Stripe payment webhook events with signature verification.
        This endpoint is called by Stripe when payment events occur.
        Supported event types: payment_intent.succeeded, payment_intent.payment_failed.
      operationId: handleStripeWebhook
      parameters:
        - name: Stripe-Signature
          in: header
          required: true
          description: |
            HMAC-SHA256 signature generated by Stripe using the webhook secret.
            Required for webhook signature verification to prevent replay attacks.
          schema:
            type: string
          example: "t=1234567890,v1=abc123..."
      requestBody:
        required: true
        description: Raw JSON payload from Stripe webhook event
        content:
          application/json:
            schema:
              type: string
            example: |
              {
                "id": "evt_...",
                "type": "payment_intent.succeeded",
                "data": {...}
              }
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookSuccessResponse'
              example:
                status: success
        '400':
          description: Invalid signature or malformed payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookErrorResponse'
              examples:
                invalid_signature:
                  value:
                    error: "Invalid signature"
                missing_signature:
                  value:
                    error: "Missing signature header"
                invalid_payload:
                  value:
                    error: "Invalid webhook payload"
        '500':
          description: Internal server error processing webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookErrorResponse'
              example:
                error: "Failed to process event"

  /auth/login/google:
    get:
      tags:
        - Authentication
      summary: Initiate Google OAuth login
      description: |
        Redirects user to Google OAuth consent page. This endpoint triggers the OAuth2
        authorization code flow. After user grants permissions on Google's consent page,
        they will be redirected back to /auth/google/callback with an authorization code.
      operationId: loginWithGoogle
      responses:
        '303':
          description: Redirect to Google OAuth consent page or callback endpoint
        '401':
          description: Authentication required or OAuth flow failed

  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Handle Google OAuth callback
      description: |
        OAuth2 callback endpoint invoked by Google after user grants permissions.
        Exchanges the authorization code for an access token, creates/updates the user record,
        and issues a JWT token for subsequent API requests. This endpoint is NOT directly callable
        by clients - it's part of the OAuth2 authorization code flow.
      operationId: handleGoogleCallback
      responses:
        '200':
          description: Authentication successful, JWT token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                user:
                  id: "550e8400-e29b-41d4-a716-446655440000"
                  email: "user@example.com"
                  displayName: "John Doe"
                  profileImageUrl: "https://example.com/avatar.jpg"
        '500':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Authentication failed: ..."

  /auth/login/facebook:
    get:
      tags:
        - Authentication
      summary: Initiate Facebook OAuth login
      description: |
        Redirects user to Facebook OAuth consent page. This endpoint triggers the OAuth2
        authorization code flow. After user grants permissions on Facebook's consent page,
        they will be redirected back to /auth/facebook/callback with an authorization code.
      operationId: loginWithFacebook
      responses:
        '303':
          description: Redirect to Facebook OAuth consent page or callback endpoint
        '401':
          description: Authentication required or OAuth flow failed

  /auth/facebook/callback:
    get:
      tags:
        - Authentication
      summary: Handle Facebook OAuth callback
      description: |
        OAuth2 callback endpoint invoked by Facebook after user grants permissions.
        Exchanges the authorization code for an access token, creates/updates the user record,
        and issues a JWT token for subsequent API requests. This endpoint is NOT directly callable
        by clients - it's part of the OAuth2 authorization code flow.
      operationId: handleFacebookCallback
      responses:
        '200':
          description: Authentication successful, JWT token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                token: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
                user:
                  id: "550e8400-e29b-41d4-a716-446655440000"
                  email: "user@example.com"
                  displayName: "Jane Smith"
                  profileImageUrl: "https://example.com/avatar.jpg"
        '500':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Authentication failed: ..."

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get current authenticated user
      description: |
        Returns user information based on the JWT token provided in the Authorization header.
        Used to verify token validity and retrieve current user details.
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
              example:
                id: "550e8400-e29b-41d4-a716-446655440000"
                email: "user@example.com"
                displayName: "John Doe"
                profileImageUrl: "https://example.com/avatar.jpg"
        '401':
          description: Invalid or missing JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "No valid JWT token found"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Failed to fetch user: ..."

  /q/health/live:
    get:
      tags:
        - Health
      summary: Liveness probe
      description: Kubernetes liveness probe endpoint. Returns 200 if the application is running.
      operationId: liveness
      responses:
        '200':
          description: Application is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        '503':
          description: Application is not alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'

  /q/health/ready:
    get:
      tags:
        - Health
      summary: Readiness probe
      description: Kubernetes readiness probe endpoint. Returns 200 if the application is ready to serve requests.
      operationId: readiness
      responses:
        '200':
          description: Application is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        '503':
          description: Application is not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'

  /q/metrics:
    get:
      tags:
        - Health
      summary: Prometheus metrics
      description: Prometheus metrics endpoint in OpenMetrics format for monitoring.
      operationId: metrics
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string
              example: |
                # HELP jvm_memory_used_bytes The amount of used memory
                # TYPE jvm_memory_used_bytes gauge
                jvm_memory_used_bytes{area="heap"} 1.2345678E8

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from OAuth2 callback endpoints

  schemas:
    WebhookSuccessResponse:
      type: object
      description: Successful webhook processing response
      properties:
        status:
          type: string
          description: Status message
          example: success

    WebhookErrorResponse:
      type: object
      description: Webhook error response
      properties:
        error:
          type: string
          description: Error message describing what went wrong
          example: "Invalid signature"

    AuthResponse:
      type: object
      description: Authentication response containing JWT token and user information
      properties:
        token:
          type: string
          description: JWT token for API authentication
          example: "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/UserInfo'

    UserInfo:
      type: object
      description: User information
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier (UUID)
          example: "550e8400-e29b-41d4-a716-446655440000"
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        displayName:
          type: string
          description: User display name
          example: "John Doe"
        profileImageUrl:
          type: string
          format: uri
          description: URL to user's profile image
          example: "https://example.com/avatar.jpg"

    ErrorResponse:
      type: object
      description: Error response
      properties:
        error:
          type: string
          description: Error message
          example: "Authentication failed"

    HealthCheckResponse:
      type: object
      description: Health check response
      properties:
        status:
          type: string
          enum: [UP, DOWN]
          description: Overall health status
        checks:
          type: array
          description: Individual health checks
          items:
            type: object
            properties:
              name:
                type: string
              status:
                type: string
                enum: [UP, DOWN]
              data:
                type: object
                additionalProperties: true
