#!/usr/bin/env bash

# tools/install.sh
# Purpose: Install/update all project dependencies (Maven + npm)
# This script is idempotent and can be safely re-run

set -e  # Exit on error
set -u  # Exit on undefined variable
set -o pipefail  # Exit on pipe failure

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Project paths
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
readonly FRONTEND_DIR="${PROJECT_ROOT}/src/main/webui"

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $*" >&2
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $*" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

# Check if required tools are installed
check_requirements() {
    local missing_tools=()

    if ! command -v mvn &> /dev/null && ! [ -x "${PROJECT_ROOT}/mvnw" ]; then
        missing_tools+=("maven (or mvnw wrapper)")
    fi

    if ! command -v node &> /dev/null; then
        missing_tools+=("node")
    fi

    if ! command -v npm &> /dev/null; then
        missing_tools+=("npm")
    fi

    if [ ${#missing_tools[@]} -ne 0 ]; then
        log_error "Missing required tools: ${missing_tools[*]}"
        log_error "Please install the missing tools and try again."
        exit 1
    fi
}

# Install/update Maven dependencies
install_maven_dependencies() {
    log_info "Installing/updating Maven dependencies..."

    cd "${PROJECT_ROOT}"

    # Use Maven wrapper if available, otherwise use system Maven
    if [ -x "./mvnw" ]; then
        ./mvnw dependency:resolve dependency:resolve-plugins -q
    else
        mvn dependency:resolve dependency:resolve-plugins -q
    fi

    log_info "Maven dependencies installed successfully"
}

# Install/update npm dependencies
install_npm_dependencies() {
    log_info "Installing/updating npm dependencies..."

    if [ ! -d "${FRONTEND_DIR}" ]; then
        log_error "Frontend directory not found: ${FRONTEND_DIR}"
        exit 1
    fi

    cd "${FRONTEND_DIR}"

    # Check if node_modules exists and is up to date
    if [ -f "package-lock.json" ] && [ -d "node_modules" ]; then
        # Check if package.json is newer than node_modules
        if [ "package.json" -nt "node_modules" ] || [ "package-lock.json" -nt "node_modules" ]; then
            log_info "Dependencies out of date, running npm ci..."
            npm ci --silent
        else
            log_info "Dependencies already up to date"
        fi
    else
        log_info "Installing npm dependencies from scratch..."
        npm install --silent
    fi

    log_info "npm dependencies installed successfully"
}

# Environment activation helper
# This exports environment variables that other scripts can source
setup_environment() {
    local env_file="${PROJECT_ROOT}/.env.tools"

    cat > "${env_file}" << 'EOF'
# Auto-generated by tools/install.sh
# Source this file in other scripts to activate the environment

# Maven command (use wrapper if available)
if [ -x "$(dirname "${BASH_SOURCE[0]}")/mvnw" ]; then
    export MVN_CMD="$(dirname "${BASH_SOURCE[0]}")/mvnw"
else
    export MVN_CMD="mvn"
fi

# Frontend directory
export FRONTEND_DIR="$(dirname "${BASH_SOURCE[0]}")/src/main/webui"

# Node/npm paths (already in PATH, but explicit for clarity)
export NODE_CMD="node"
export NPM_CMD="npm"
EOF

    log_info "Environment configuration written to ${env_file}"
}

# Main execution
main() {
    log_info "Starting dependency installation for Village Calendar..."
    log_info "Project root: ${PROJECT_ROOT}"

    # Change to project root
    cd "${PROJECT_ROOT}"

    # Check requirements
    check_requirements

    # Install Maven dependencies
    install_maven_dependencies

    # Install npm dependencies
    install_npm_dependencies

    # Setup environment file for other scripts
    setup_environment

    log_info "All dependencies installed successfully!"
    exit 0
}

# Run main function
main "$@"
