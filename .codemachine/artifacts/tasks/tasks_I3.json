[
  {
    "task_id": "I3.T1",
    "iteration_id": "I3",
    "iteration_goal": "Implement complete e-commerce workflow including Stripe payment integration, order placement, order management dashboard (admin), and transactional email notifications",
    "description": "Add Stripe Java SDK dependency to Maven POM. Configure Stripe API key in application.properties (from environment variable STRIPE_API_KEY). Create StripeService with methods: createCheckoutSession (create Stripe Checkout Session for order, include line items, success/cancel URLs), retrieveSession (get session details), validateWebhookSignature (verify Stripe webhook signature for security). Implement Stripe configuration for test mode (use Stripe test API keys). Document Stripe account setup in docs/guides/stripe-setup.md (creating Stripe account, obtaining API keys, configuring webhook endpoints).",
    "agent_type_hint": "BackendAgent",
    "inputs": "Stripe integration requirements from Plan Section \"Payment Processing\", Stripe Java SDK documentation, Order entity from I1.T8",
    "target_files": ["pom.xml", "src/main/resources/application.properties", "src/main/java/com/villagecompute/calendar/integration/stripe/StripeService.java", "docs/guides/stripe-setup.md"],
    "input_files": ["pom.xml", "src/main/resources/application.properties", "src/main/java/com/villagecompute/calendar/model/Order.java"],
    "deliverables": "Stripe SDK integrated into project, StripeService class with checkout session creation, Webhook signature validation method, Stripe setup guide for developers",
    "acceptance_criteria": "StripeService.createCheckoutSession() returns valid Stripe Checkout Session URL, Webhook signature validation accepts valid Stripe signatures, rejects invalid ones, Stripe test mode uses test API keys (sk_test_...), Stripe setup guide tested with new Stripe account creation, No production API keys committed to repository (env variables only)",
    "dependencies": ["I1.T8"],
    "parallelizable": true,
    "done": true
  },
  {
    "task_id": "I3.T2",
    "iteration_id": "I3",
    "iteration_goal": "Implement complete e-commerce workflow including Stripe payment integration, order placement, order management dashboard (admin), and transactional email notifications",
    "description": "Create OrderService with business logic for e-commerce: createOrder (from cart/calendar, calculate subtotal/tax/shipping, persist Order and OrderItem entities), updateOrderStatus (transition order through lifecycle: PENDING → PAID → IN_PRODUCTION → SHIPPED → DELIVERED), cancelOrder (set status to CANCELLED, process refund if applicable), getOrder (by ID with authorization), listOrders (by user, by status, with pagination for admin). Implement OrderRepository with custom queries: findByUserId, findByStatus, findByOrderNumber (unique display number). Add order number generation (e.g., \"VC-2025-00001\" format). Handle order status state machine validation (cannot go from SHIPPED back to PENDING). Write unit tests for all order business logic.",
    "agent_type_hint": "BackendAgent",
    "inputs": "Order, OrderItem, Payment entities from I1.T8, E-commerce requirements from Plan Section \"Order Management\"",
    "target_files": ["src/main/java/com/villagecompute/calendar/service/OrderService.java", "src/main/java/com/villagecompute/calendar/repository/OrderRepository.java", "src/main/java/com/villagecompute/calendar/util/OrderNumberGenerator.java", "src/test/java/com/villagecompute/calendar/service/OrderServiceTest.java"],
    "input_files": ["src/main/java/com/villagecompute/calendar/model/Order.java", "src/main/java/com/villagecompute/calendar/model/OrderItem.java", "src/main/java/com/villagecompute/calendar/model/Payment.java"],
    "deliverables": "OrderService with complete e-commerce logic, OrderRepository with custom query methods, Order number generation (unique, sequential), Order status state machine validation, Unit tests with >80% coverage",
    "acceptance_criteria": "OrderService.createOrder() calculates tax and shipping, persists order, Order number format: \"VC-YYYY-NNNNN\" (e.g., VC-2025-00001), OrderService.updateOrderStatus() enforces valid transitions (PENDING can go to PAID or CANCELLED, but SHIPPED cannot go to PENDING), OrderRepository.findByOrderNumber() retrieves order by display number, Unit tests verify order creation, status transitions, cancellation logic",
    "dependencies": ["I1.T8"],
    "parallelizable": true,
    "done": true
  },
  {
    "task_id": "I3.T3",
    "iteration_id": "I3",
    "iteration_goal": "Implement complete e-commerce workflow including Stripe payment integration, order placement, order management dashboard (admin), and transactional email notifications",
    "description": "Create PaymentService for handling Stripe payment processing: createPayment (store Payment record linked to Order), processPaymentSuccess (on Stripe webhook, update Payment and Order status to PAID), processRefund (create refund via Stripe API, update Payment record). Implement StripeWebhookController (REST endpoint POST /api/webhooks/stripe) to receive Stripe webhook events: checkout.session.completed (payment succeeded), charge.refunded (refund processed). Add webhook signature validation to prevent spoofing. Implement idempotent webhook processing (handle duplicate webhook delivery). Enqueue email job on payment success (order confirmation email). Write integration tests for webhook handling.",
    "agent_type_hint": "BackendAgent",
    "inputs": "Payment entity from I1.T8, OrderService from Task I3.T2, StripeService from Task I3.T1, Webhook requirements from Plan Section \"Payment Processing\"",
    "target_files": ["src/main/java/com/villagecompute/calendar/service/PaymentService.java", "src/main/java/com/villagecompute/calendar/api/rest/StripeWebhookController.java", "src/test/java/com/villagecompute/calendar/api/rest/StripeWebhookControllerTest.java"],
    "input_files": ["src/main/java/com/villagecompute/calendar/integration/stripe/StripeService.java", "src/main/java/com/villagecompute/calendar/service/OrderService.java", "src/main/java/com/villagecompute/calendar/model/Payment.java"],
    "deliverables": "PaymentService with payment processing logic, Webhook endpoint handling Stripe events, Idempotent webhook processing (duplicate handling), Email job enqueuing on payment success, Integration tests for webhook scenarios",
    "acceptance_criteria": "Webhook endpoint validates Stripe signature, rejects invalid requests, checkout.session.completed event creates Payment record, updates Order status to PAID, Duplicate webhook delivery (same event ID) does not create duplicate payments, Payment success triggers email job enqueue (order confirmation), Integration test simulates Stripe webhook POST, verifies order status change, charge.refunded webhook updates Payment record with refund amount",
    "dependencies": ["I3.T1", "I3.T2"],
    "parallelizable": false,
    "done": true
  },
  {
    "task_id": "I3.T4",
    "iteration_id": "I3",
    "iteration_goal": "Implement complete e-commerce workflow including Stripe payment integration, order placement, order management dashboard (admin), and transactional email notifications",
    "description": "Implement order-related GraphQL resolvers. Queries: order(orderId) (fetch order with items, payment, calendar preview - authorize user), orders(userId, status) (list user's orders with pagination, admin can query all orders). Mutations: placeOrder(input) (validate calendar ownership, create order, create Stripe Checkout Session, return checkout URL), cancelOrder(orderId, reason) (authorize, validate order status, cancel order, optionally process refund). Add DataLoader for efficient order item fetching. Implement error handling (order not found, unauthorized access, invalid status for cancellation). Write integration tests for all resolvers.",
    "agent_type_hint": "BackendAgent",
    "inputs": "OrderService from Task I3.T2, PaymentService from Task I3.T3, GraphQL schema from I1.T6",
    "target_files": ["src/main/java/com/villagecompute/calendar/api/graphql/OrderResolver.java", "src/main/java/com/villagecompute/calendar/api/graphql/dataloader/OrderDataLoader.java", "src/test/java/com/villagecompute/calendar/api/graphql/OrderResolverTest.java"],
    "input_files": ["src/main/java/com/villagecompute/calendar/service/OrderService.java", "src/main/java/com/villagecompute/calendar/service/PaymentService.java", "src/main/java/com/villagecompute/calendar/api/graphql/OrderResolver.java", "api/graphql-schema.graphql"],
    "deliverables": "All order query/mutation resolvers implemented, DataLoader for order items and payments, Authorization checks (user can only access own orders unless admin), Error handling with meaningful GraphQL errors, Integration tests for all resolvers",
    "acceptance_criteria": "GraphQL query { order(orderId: \"123\") { orderNumber status items { calendar { title } } } } returns order with nested data, placeOrder mutation creates order, returns Stripe Checkout URL, Unauthorized access to other user's order returns GraphQL error, Admin role can query any user's orders, cancelOrder mutation validates order status (cannot cancel shipped order), returns updated order, Integration tests verify end-to-end GraphQL order workflows",
    "dependencies": ["I3.T2", "I3.T3"],
    "parallelizable": false,
    "done": true
  },
  {
    "task_id": "I3.T5",
    "iteration_id": "I3",
    "iteration_goal": "Implement complete e-commerce workflow including Stripe payment integration, order placement, order management dashboard (admin), and transactional email notifications",
    "description": "Create Vue.js components for the checkout workflow. Checkout.vue (main checkout page, displays order summary, shipping form, payment section), OrderSummary.vue (displays calendar preview, product details, pricing breakdown), ShippingForm.vue (PrimeVue form for shipping address input with validation), StripeCheckout.vue (component that redirects to Stripe Checkout Session on button click). Implement checkout flow in Pinia store (cartStore.ts - add to cart, update quantity, calculate totals). Integrate with GraphQL API: placeOrder mutation (get Stripe Checkout URL), redirect user to Stripe. Handle success/cancel callbacks (OrderSuccess.vue, OrderCancelled.vue pages). Add loading states, form validation, error handling.",
    "agent_type_hint": "FrontendAgent",
    "inputs": "Checkout flow requirements from Plan Section \"User Experience\", PrimeVue form components documentation, GraphQL schema from I1.T6",
    "target_files": ["frontend/src/views/Checkout.vue", "frontend/src/views/OrderSuccess.vue", "frontend/src/views/OrderCancelled.vue", "frontend/src/components/checkout/OrderSummary.vue", "frontend/src/components/checkout/ShippingForm.vue", "frontend/src/components/checkout/StripeCheckout.vue", "frontend/src/stores/cart.ts", "frontend/src/graphql/order-mutations.ts"],
    "input_files": ["frontend/src/views/Checkout.vue", "frontend/src/stores/cart.ts", "api/graphql-schema.graphql"],
    "deliverables": "Functional checkout flow UI with all components, Order summary displays calendar preview, product type, pricing, Shipping form validates address fields (name, street, city, state, zip), Stripe Checkout button redirects to Stripe hosted checkout page, Success page displays order confirmation, order number, Cancel page allows user to return to cart or calendar editor, GraphQL integration (placeOrder mutation)",
    "acceptance_criteria": "Checkout page loads cart from Pinia store, displays order summary, Shipping form validates required fields (shows error messages), Clicking \"Pay with Stripe\" calls placeOrder mutation, redirects to Stripe URL, After Stripe payment, user redirected to OrderSuccess page with order number, If user cancels at Stripe, redirected to OrderCancelled page, Loading spinner shown during placeOrder mutation, Error messages displayed if mutation fails (calendar not found, etc.)",
    "dependencies": ["I3.T4"],
    "parallelizable": true,
    "done": true
  },
  {
    "task_id": "I3.T6",
    "iteration_id": "I3",
    "iteration_goal": "Implement complete e-commerce workflow including Stripe payment integration, order placement, order management dashboard (admin), and transactional email notifications",
    "description": "Create admin panel for order management. OrderDashboard.vue (admin view, lists all orders with filtering/sorting), OrderDetailsPanel.vue (detailed order view with customer info, shipping address, order items, status timeline), OrderStatusUpdater.vue (admin tool to update order status, add tracking number, add notes). Use PrimeVue DataTable with pagination, filtering, sorting. Implement order filtering: by status (PENDING, PAID, SHIPPED, etc.), by date range, by order number search. Add admin actions: mark as shipped (enter tracking number), add notes, cancel order (with reason). Protect routes with admin role check. Integrate with GraphQL API (orders query with admin role, updateOrderStatus mutation).",
    "agent_type_hint": "FrontendAgent",
    "inputs": "Admin order management requirements from Plan Section \"Admin Order Management Interface\", PrimeVue DataTable documentation",
    "target_files": ["frontend/src/views/admin/OrderDashboard.vue", "frontend/src/views/admin/OrderDetailsPanel.vue", "frontend/src/components/admin/OrderStatusUpdater.vue", "frontend/src/components/admin/OrderFilters.vue", "frontend/src/graphql/admin-queries.ts"],
    "input_files": ["frontend/src/views/AdminPanel.vue", "api/graphql-schema.graphql"],
    "deliverables": "Admin order dashboard with data table, Order filtering (status, date range, search), Order details panel with full customer/order info, Status updater (admin can change status, add tracking number), GraphQL integration (admin queries/mutations), Role-based access control (admin only)",
    "acceptance_criteria": "Order dashboard displays all orders in DataTable (paginated, 25 per page), Filtering by status updates table (e.g., show only SHIPPED orders), Clicking order row opens OrderDetailsPanel with full order info, Admin can mark order as SHIPPED, enter tracking number, save changes, Non-admin users redirected from /admin routes (route guard check), GraphQL query uses admin context (orders query without userId filter), Status update mutation persists changes to database",
    "dependencies": ["I3.T4"],
    "parallelizable": true,
    "done": true
  },
  {
    "task_id": "I3.T7",
    "iteration_id": "I3",
    "iteration_goal": "Implement complete e-commerce workflow including Stripe payment integration, order placement, order management dashboard (admin), and transactional email notifications",
    "description": "Create EmailService for composing and sending transactional emails via SMTP (GoogleWorkspace initially). Implement email templates (HTML + plain text) for: order confirmation (sent on payment success), shipping notification (sent when order marked as SHIPPED with tracking number), order cancellation (sent when order cancelled). Configure JavaMail in application.properties (SMTP host, port, TLS, auth credentials from env variables). Create EmailJob (DelayedJob implementation) for async email sending. Implement email queueing via JobManager (enqueue EmailJob on order events). Add retry logic for failed email sends. Test with Mailpit (local SMTP server for development). Document email configuration in docs/guides/email-setup.md.",
    "agent_type_hint": "BackendAgent",
    "inputs": "Email notification requirements from Plan Section \"Order Notifications\", JavaMail documentation, DelayedJob pattern from architecture plan",
    "target_files": ["src/main/java/com/villagecompute/calendar/integration/email/EmailService.java", "src/main/java/com/villagecompute/calendar/jobs/EmailJob.java", "src/main/resources/email-templates/order-confirmation.html", "src/main/resources/email-templates/order-confirmation.txt", "src/main/resources/email-templates/shipping-notification.html", "src/main/resources/email-templates/shipping-notification.txt", "src/main/resources/email-templates/order-cancellation.html", "src/main/resources/email-templates/order-cancellation.txt", "docs/guides/email-setup.md"],
    "input_files": ["src/main/resources/application.properties", "src/main/java/com/villagecompute/calendar/model/DelayedJob.java", "src/main/java/com/villagecompute/calendar/service/OrderService.java"],
    "deliverables": "EmailService with template rendering and SMTP sending, EmailJob for async email processing, Email templates (HTML + plain text) for all order events, Email queueing integrated into OrderService, Retry logic for failed sends (DelayedJob retry mechanism), Email configuration guide",
    "acceptance_criteria": "EmailService sends email successfully via GoogleWorkspace SMTP, Email templates render with order data (order number, customer name, items), EmailJob enqueued when order status changes to PAID or SHIPPED, Failed email sends retry 3 times with exponential backoff, Mailpit receives emails during local development (SMTP localhost:1025), Email configuration guide tested with fresh GoogleWorkspace account",
    "dependencies": ["I3.T2"],
    "parallelizable": true,
    "done": true
  },
  {
    "task_id": "I3.T8",
    "iteration_id": "I3",
    "iteration_goal": "Implement complete e-commerce workflow including Stripe payment integration, order placement, order management dashboard (admin), and transactional email notifications",
    "description": "Create ShippingService for calculating shipping costs based on destination address. Implement simple shipping rate table (configurable in database or properties): domestic (US) shipping tiers (standard, priority, express with fixed rates), international shipping (fixed rate by region or disable for MVP). Add shipping cost calculation to OrderService.createOrder (parse shipping address, determine rate, add to order total). Create shipping_rates configuration table or use application.properties. Handle tax calculation (placeholder for Stripe Tax integration in future - for MVP, use simple state sales tax table or skip). Add shipping cost display in checkout UI (update OrderSummary component).",
    "agent_type_hint": "BackendAgent",
    "inputs": "Shipping requirements from Plan Section \"Shipping Options\", Order and shipping address structure from Order entity",
    "target_files": ["src/main/java/com/villagecompute/calendar/service/ShippingService.java", "src/main/resources/application.properties", "src/test/java/com/villagecompute/calendar/service/ShippingServiceTest.java"],
    "input_files": ["src/main/java/com/villagecompute/calendar/service/OrderService.java", "src/main/java/com/villagecompute/calendar/model/Order.java"],
    "deliverables": "ShippingService with rate calculation logic, Shipping rates configured (standard: $5.99, priority: $9.99, express: $14.99 for MVP), Integration into OrderService (shipping cost added to order total), Unit tests for rate calculation (domestic, international)",
    "acceptance_criteria": "ShippingService.calculateRate(address) returns correct rate based on address, Domestic US addresses charged standard rate ($5.99), International addresses charged higher rate or rejected (for MVP), OrderService.createOrder includes shipping cost in total, Unit tests verify rate calculation for various address scenarios, Shipping cost displayed in checkout UI OrderSummary component",
    "dependencies": ["I3.T2"],
    "parallelizable": true,
    "done": false
  },
  {
    "task_id": "I3.T9",
    "iteration_id": "I3",
    "iteration_goal": "Implement complete e-commerce workflow including Stripe payment integration, order placement, order management dashboard (admin), and transactional email notifications",
    "description": "Create end-to-end integration tests for complete e-commerce workflows using Quarkus test framework with REST Assured. Test scenarios: (1) Place order and payment success - create calendar, place order, simulate Stripe webhook (checkout.session.completed), verify order status PAID, verify email job enqueued; (2) Cancel order - create order, cancel order, verify status CANCELLED, verify refund processed (mock Stripe API); (3) Admin order management - admin queries all orders, updates order status to SHIPPED, adds tracking number, verifies changes persisted. Use Testcontainers for PostgreSQL, mock Stripe API for webhook simulation. Achieve >70% code coverage for order/payment services and API layer.",
    "agent_type_hint": "BackendAgent",
    "inputs": "All implemented services and resolvers from I3 tasks, Quarkus testing, REST Assured, Testcontainers documentation",
    "target_files": ["src/test/java/com/villagecompute/calendar/integration/OrderWorkflowTest.java", "src/test/java/com/villagecompute/calendar/integration/PaymentWorkflowTest.java", "src/test/java/com/villagecompute/calendar/integration/AdminOrderWorkflowTest.java"],
    "input_files": ["api/graphql-schema.graphql"],
    "deliverables": "Integration tests for all critical e-commerce workflows, Tests use GraphQL API and webhook endpoints, Stripe webhook simulation (mock events), Test database with Testcontainers, Tests achieve >70% coverage for order/payment code",
    "acceptance_criteria": "Order placement test creates order, simulates Stripe webhook, verifies order PAID, Payment success test verifies Payment entity created with correct amount, Email job enqueued on payment success (verifiable in delayed_jobs table), Cancel order test processes refund, updates order status to CANCELLED, Admin workflow test updates order status, adds tracking number, verifies persistence, All integration tests pass with ./mvnw verify, Tests run in <90 seconds",
    "dependencies": ["I3.T1", "I3.T2", "I3.T3", "I3.T4", "I3.T5", "I3.T6", "I3.T7", "I3.T8"],
    "parallelizable": false,
    "done": false
  },
  {
    "task_id": "I3.T10",
    "iteration_id": "I3",
    "iteration_goal": "Implement complete e-commerce workflow including Stripe payment integration, order placement, order management dashboard (admin), and transactional email notifications",
    "description": "Create comprehensive documentation for e-commerce setup and testing. Write docs/guides/ecommerce-testing.md with instructions for: testing checkout flow locally (using Stripe test mode, test card numbers), configuring Stripe webhook endpoints (local ngrok tunnel for development, production webhook URL), testing webhook delivery (Stripe CLI for local testing), testing email notifications (Mailpit for local, real SMTP for staging). Write docs/guides/order-management.md for admins explaining order lifecycle, status transitions, how to mark orders as shipped, how to process refunds. Include troubleshooting section (webhook signature validation failures, email send failures, order status stuck).",
    "agent_type_hint": "DocumentationAgent",
    "inputs": "E-commerce implementation from all I3 tasks, Stripe testing documentation, Order management requirements from Plan Section \"Admin Order Management Interface\"",
    "target_files": ["docs/guides/ecommerce-testing.md", "docs/guides/order-management.md", "docs/guides/troubleshooting-ecommerce.md"],
    "input_files": ["src/main/java/com/villagecompute/calendar/service/OrderService.java", "src/main/java/com/villagecompute/calendar/api/rest/StripeWebhookController.java", "docs/guides/stripe-setup.md"],
    "deliverables": "E-commerce testing guide with local development instructions, Order management guide for admin users, Troubleshooting guide for common e-commerce issues",
    "acceptance_criteria": "Testing guide includes Stripe test card numbers, webhook testing with Stripe CLI, Order management guide explains order status lifecycle with diagrams, Troubleshooting guide addresses webhook signature failures, email send errors, Documentation tested by following steps in fresh development environment, All guides written in Markdown with screenshots/examples",
    "dependencies": ["I3.T1", "I3.T2", "I3.T3", "I3.T4", "I3.T5", "I3.T6", "I3.T7", "I3.T8", "I3.T9"],
    "parallelizable": true,
    "done": false
  }
]
